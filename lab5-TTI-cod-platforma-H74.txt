class codH74():
    def __init__(self):
            self.n = 3
            self.k = 1
            self.m = self.n - self.k
            #self.H = np.array([[0, 0, 0, 1, 1, 1, 1], [0, 1, 1, 0, 0, 1, 1], [1, 0, 1, 0, 1, 0, 1]])
            self.H = np.array([[0, 1, 1], [1, 0, 1]])

    def __repr__(self):
        return 'Matricea de control pentru codul H(7,4):\n {}'.format(repr(self.H))

    def codare(self, i):
        [i3, i5, i6, i7] = i
        c1 = (i3 + i5 + i7) % 2
        c2 = (i3 + i6 + i7) % 2
        c4 = (i5 + i6 + i7) % 2

        return np.array([c1, c2, i3, c4, i5, i6, i7])

    def detectie_erori(self, v_rec):
        z = np.mod(np.matmul(self.H, v_rec), 2)
        return (z == np.zeros(shape=(self.m, ))).all()

    def corectie_erori(self, v_rec):
        z = np.mod(np.matmul(self.H, v_rec), 2)
        if(z == np.zeros(shape=(self.m, ))).all():
            return v_rec
        else:
            cuvant_eroare_estimat = np.zeros(shape=(self.n, ), dtype = int)
            # OBSERVATIE!
            # La codurile Hamming nesistematice, z reprezinta pozitia eronata in binar
            # Pentru restul codurilor, se identifica pozitia eronata prin identificarea coloanei din H
            # egala cu z
            pozitie_eroare_estimata = bin2dec(z)
            print('Eroarea se produsese pe pozitia: {}'.format(pozitie_eroare_estimata))
            cuvant_eroare_estimat[pozitie_eroare_estimata-1] = 1
            v_corectat = np.mod(v_rec + cuvant_eroare_estimat, 2)

            return v_corectat

def bin2dec(a):
    b = 0
    for p in range(len(a)):
        b += a[-p - 1] * (2**p)
        return np.int(b)

def transmitere_canal(v, e):
    cuvant_eroare = np.zeros(shape=(len(v), ), dtype = int) # initial
    pozitie_eronata = random.sample(range(len(v)), k=e)
    cuvant_eroare[pozitie_eronata] = 1
    v_rec = np.mod(v + cuvant_eroare, 2) # o pozitie aleasa aleator este eronata

    return v_rec

cod = codH74()
print(cod)

# Codare
print('\nCODARE')
i = [0, 1, 1, 0]
v = cod.codare(i)
print('Cuvantul de cod pentru {} este {}'.format(i, v))

# (a) Transmitere printr-un canal cu zgomot (1 eroare)
# random.seed(32)
print('\nCAZUL (a)')
e = 1
print('\nPe canal se transmite {}'.format(v))
v_rec = transmitere_canal(v, e)
print('La receptor, ajunge cuvantul {}'.format(v_rec))
print('Exista erori? {}'.format(~cod.detectie_erori(v_rec)))
v_corectat = cod.corectie_erori(v_rec)
print('Cuvantul corectat este: {}'.format(v_corectat))
print('Este cuvantul corectat identic cu cuvantul de cod transmis? {}'.format((v_corectat == v).all()))
# Decodare
i_decodare = [v_corectat[2], v_corectat[4], v_corectat[5], v_corectat[6]]
print('Mesajul recuperat: {}'.format(i_decodare))

# (b) Transmitere printr-un canal cu zgomot (2 erori)
print('\nCAZUL (b)')
print('\nPe canal se transmite {}'.format(v))
e = 2
v_rec = transmitere_canal(v, e)
print('La receptor, ajunge cuvantul {}'.format(v_rec))
print('Exista erori? {}'.format(~cod.detectie_erori(v_rec)))
v_corectat = cod.corectie_erori(v_rec)
print('Cuvantul corectat este: {}'.format(v_corectat))
print('Este cuvantul corectat identic cu cuvantul de cod transmis? {}'.format((v_corectat == v).all()))